# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(ansible docker dotnet git git-auto-fetch gradle helm kubectl repo ssh zsh-autosuggestions zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_RUNTIME_DIR="$HOME/.local/run"

export ANDROID_HOME="$HOME/.android/sdk"
export ANDROID_AVD_HOME="$HOME/.android/avd"
export ANDROID_BUILD_TOOLS="$ANDROID_HOME/build-tools/36.0.0"
export ANDROID_EMULATOR_HOME="$HOME/.android"
export ANDROID_PLATFORM_TOOLS="$ANDROID_HOME/platform-tools"
export ANDROID_TOOLCHAIN="$ANDROID_HOME/ndk/28.2.13676358/toolchains/llvm/prebuilt/linux-x86_64"
export ANDROID_USER_HOME="$HOME/.android"
{{- with .windows -}}
{{- if .isWSL }}
export BROWSER="wslview"
{{- end -}}
{{- end }}
{{- if eq .chezmoi.hostname "ubuild01" }}
export FILES_DIR="$HOME/.local/share/playground/docker/filebrowser/files"
{{- end }}
export GH_TOKEN="$(gh auth token)"
export GITHUB_TOKEN="$GH_TOKEN"
export GITHUB_API_TOKEN="$GH_TOKEN"
export LD_LIBRARY_PATH="$HOME/.local/lib64:$HOME/.local/lib:$LD_LIBRARY_PATH"
export PATH="$ANDROID_BUILD_TOOLS:$ANDROID_PLATFORM_TOOLS:$ANDROID_TOOLCHAIN/bin:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
export PLAYGROUND_DIR="$HOME/.local/share/playground"
{{- if eq .chezmoi.hostname "ubuntu-pc" }}
export SSH_AUTH_SOCK="$HOME/.bitwarden-ssh-agent.sock"
{{- end }}
{{- if eq .chezmoi.os "android" }}
export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/rbw/ssh-agent-socket"
{{- end }}
export TERMV_AUTO_UPDATE="false"
export TERMV_FULL_SCREEN="true"
{{- with .windows -}}
{{- if .isWSL }}
export WIN_HOME_RAW="$(cmd.exe /c "<nul set /p=%UserProfile%" 2>/dev/null)"
export WIN_HOME="$(wslpath $WIN_HOME_RAW)"
{{- end -}}
{{- end }}

alias bumppre='npm install && npm run bump:pre'
alias buildroid='source build/envsetup.sh && lunch ponces_gsi_arm64-bp1a-userdebug && make -j$(nproc --ignore=2) systemimage'
alias bwlock='rbw lock'
alias bwlogin='rbw login && rbw sync'
alias bwunlock='rbw unlock && rbw sync'
alias cddev='cd $HOME/ponces/device/ponces/gsi'
alias cdtop='cd $HOME/ponces'
{{- if eq .chezmoi.hostname "ubuntu-pc" }}
alias cdown='cd $HOME/Downloads'
alias cgit='cd $HOME/Git'
{{- end }}
{{- with .windows -}}
{{- if .isWSL }}
alias cdown='cd $WIN_HOME/Downloads'
alias cgit='cd $WIN_HOME/Git'
alias devcode='mypath="$(wslpath -w $PWD)" && p=$(printf "%s" "$mypath" | hexdump -v -e "/1 \"%02x\"") && code --folder-uri "vscode-remote://dev-container+${p}/workspaces/$(basename $PWD)"'
{{- end -}}
{{- end }}
alias pubdev='npm install && npm run build:bundle && npm run publish:dev'
alias pubnext='npm install && npm run build:bundle && npm run publish'
alias publast='npm install && npm run build:bundle && npm run publish:live'
{{- with .windows -}}
{{- if .isWSL }}
alias ssh='ssh.exe'
alias ssh-add='ssh-add.exe'
{{- end -}}
{{- end }}
alias sshcode='code --remote "ssh-remote+ubuild01"'
{{- if eq .chezmoi.os "android" -}}
alias tmuxbackup='tar -zcf $HOME/storage/downloads/termux-backup-$(date '"'"'+%Y%m%d%H%M'"'"').tar.gz -C /data/data/com.termux/files ./home ./usr'
alias tmuxrestore='tar -zxf $HOME/storage/downloads/termux-backup-*.tar.gz -C /data/data/com.termux/files --recursive-unlink --preserve-permissions'
{{- end }}

unalias gradle

docker() { docker "$@" | logalize; }
dotnet() { dotnet "$@" | logalize; }
gcurl() { curl -H "Authorization: token $GH_TOKEN" "$1" "$(curl -s -I "$2" | grep -i "^location:" | awk '{print $2}' | tr -d '\r')"; }
gradle() { gradle-or-gradlew "$@" | logalize; }
{{- if eq .chezmoi.os "android" }}
mise () { proot -b "$PREFIX/etc/resolv.conf:/etc/resolv.conf" -b "$PREFIX/etc/tls:/etc/ssl" mise "$@"; }
{{- end }}
sendff() { ffsend upload --host https://send.vis.ee "$1" --downloads 5 --password "$USER" --verbose; }

{{ if eq .chezmoi.os "android" -}}
sv-enable code
sv-enable sshd
rbw config set email {{ .git.email | quote }}
rbw unlocked 2>/dev/null || rbw login
rbw unlocked 2>/dev/null || rbw unlock
{{- end }}

eval "$($HOME/.local/bin/mise activate zsh)"
